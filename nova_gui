import tkinter as tk
from screeninfo import get_monitors
import customtkinter

# Obter informações sobre os monitores conectados
monitors = get_monitors()

# Se houver múltiplos monitores, escolher o monitor principal ou um específico
monitor = monitors[0]  # Seleciona o monitor primário (primeiro monitor na lista)

screen_width = monitor.width
screen_height = monitor.height

# Definir largura e altura da janela
largura = monitor.width
altura = monitor.height

# Calcula a posição para centralizar a janela no monitor selecionado
x = (screen_width // 2) - (largura // 2)
y = (screen_height // 2) - (altura // 2)

my_custom_theme = {
    "primary_color": "#e3e9f0",      # Main color (Light Grayish Blue)
        "color1": "#e4ebf1",         # Light Grayish Blue
        "color2": "#11115c",         # Azul Banrisul (Dark Blue)
        "color3": "#95a6ba",         # Cinza (Gray)
        "color4": "#908682",         # Olive Gray
        "color5": "#bfbbb6",         # Light Taupe
        "color6": "#7d678f",         # Purple Gray
        "color7": "#b8c2d1",         # Cinza Médio (Medium Gray)
        "color8": "#c4c3c6",         # Light Silver
        "color9": "#aea0ac",         # Lavender Gray
        "color10": "#6c8cac",        # Slate Blue

}

class App(customtkinter.CTk):
    def __init__(self):
        super().__init__() #When you use super().__init__() in a subclass, you're calling the __init__() method of the parent class, allowing the child class to properly initialize the inherited attributes and perform any setup that the parent class requires. 

        # configure window
        self.title("CustomTkinter complex_example.py")
        self.geometry(f'{largura}x{altura}+{x}+{y}')
        self.configure(fg_color=my_custom_theme["primary_color"])  # Light Grayish Blue

        # Create the canvas_1
        canvas_1 = customtkinter.CTkCanvas(self, width=largura, height=100)
        canvas_1.pack()

        # Draw the first rectangle with color1
        canvas_1.create_rectangle(0, 0, largura, 25, outline="", width=3, fill="white")

        # Draw the second rectangle with color2
        canvas_1.create_rectangle(0, 25, largura, 75, outline="", width=3, fill=my_custom_theme["color2"])

        # Draw the third rectangle with color3
        canvas_1.create_rectangle(0, 75, largura, 100, outline="", width=3, fill=my_custom_theme["color8"])

        canvas_2 = customtkinter.CTkCanvas(self, width=largura, height=150)
        canvas_2.place(x= 20, y=500, width=largura-20, height=150)

        # Draw the first rectangle with color1
        canvas_2.create_rectangle(0, 0, largura-50, 25, outline="", width=3, fill="white")
        canvas_2.create_rectangle(0, 30, largura-50, 150, outline="", width=3, fill="white")

        #Draw the text
        # texto_1 = customtkinter.CTkLabel(self, largura, 25, text_color="black", text="Bem vindo ao app")

        welcome_frame = customtkinter.CTkFrame(self, fg_color="white", width=largura-40, height=150)
        welcome_frame.place(x= largura/2.7, y=550)

        welcome_text_1 = customtkinter.CTkLabel(welcome_frame, text="Seja bem vindo à", text_color="black", font=("Times New Roman", 16))
        welcome_text_1.pack()  # Add padding around the label
        welcome_text_2 = customtkinter.CTkLabel(welcome_frame, text="Calculadora de Saldo de Liquidação de Portabilidades", text_color="#5bc2e7", font=("Times New Roman", 20))
        welcome_text_2.pack()  # Add padding around the label

        botao = customtkinter.CTkButton(self, text="Calcular Saldo de Liquidação", width=50, height=20, fg_color="white", text_color="black")
        botao.place(x=0,y=2)

if __name__ == "__main__":
    app = App()
    app.mainloop()